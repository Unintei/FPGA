`timescale 1 ns/1 ns

module tb_uart_linjuan03();

//时钟和复位
reg clk  ;
reg rst_n;

//uut的输入信号
reg  rx_uart;

//uut的输出信号
wire [7:0] led;


//时钟周期，单位为ns，可在此修改时钟周期。
parameter CYCLE    = 20;

//复位时间，此时表示复位3个时钟周期的时间。
parameter RST_TIME = 3 ;

//待测试的模块例化
uart_linjuan03 #(.T(2)) uut
(
    .clk          (clk     ), 
    .rst_n        (rst_n   ),
    .rx_uart      (rx_uart ),
    .led          (led     )
);


//生成本地时钟50M
initial begin
    clk = 0;
    forever
    #(CYCLE/2)
    clk=~clk;
end

//产生复位信号
initial begin
    rst_n = 1;
    #2;
    rst_n = 0;
    #(CYCLE*RST_TIME);
    rst_n = 1;
end

//输入信号rx_uart赋值方式
initial begin
    #1;
    //赋初值
    rx_uart=1'b1;
    #200;
    //开始赋值,模拟发送8次数据，8'h00110001
    rx_bit(8'b0);
    rx_bit(8'b0);
    rx_bit(8'b1);
    rx_bit(8'b1);
    rx_bit(8'b0);
    rx_bit(8'b0);
    rx_bit(8'b0);
    rx_bit(8'b1);
end

//定义一个名为 rx_bit 的任务，每次发送的数据有 10 位
 //data 的值分别为 0~7 由 j 的值传递进来
 //任务以 task 开头，后面紧跟着的是任务名，调用时使用
 task rx_bit(
 //传递到任务中的参数，调用任务的时候从外部传进来一个 8 位的值
 input [7:0] data
 );
 integer i; //定义一个常量
 //用 for 循环产生一帧数据，for 括号中最后执行的内容只能写 i=i+1
 //不可以写成 C 语言 i=i++的形式
 for(i=0; i<10; i=i+1) begin
 case(i)
 0: rx <= 1'b0;
 1: rx <= data[0];
 2: rx <= data[1];
 3: rx <= data[2];
 4: rx <= data[3];
 5: rx <= data[4];
 6: rx <= data[5];
 7: rx <= data[6];
 8: rx <= data[7];
 9: rx <= 1'b1;
 endcase
 #(5208*20); //每发送 1 位数据延时 5208 个时钟周期
 end
 endtask //任务以 endtask 结束





endmodule

