module ztj(
    input clk,
    input rst_n,
    output reg [5:0] led,//6个led 
    output reg [4:0] ew_data,
    output reg [4:0] sn_data   
);
//参数定义
parameter     T1S=50_000_000;//1s
parameter     IDLE=4'b0000;
parameter     EWG_SNR=4'b0001;//东西绿 南北红 1
parameter     EWY_SNR=4'b0010;//东西黄 南北红 2
parameter     EWR_SNG=4'b0100;//东西红 南北绿 3
parameter     EWR_SNY=4'b1000;//东西红 南北黄 4
//中间信号定义
reg [25:0] cnt0;//1s计数器
wire   add_cnt0;
wire   end_cnt0;
reg [4:0]  cnt1;//30s计数器
wire   add_cnt1;
wire   end_cnt1;
reg[3:0] state_c;      //状态机当前态
reg[3:0] state_n;      //状态机次态 下一个状态
wire idle2ewg_snr_start;
wire ewg_snr2ewy_snr_start;
wire ewy_snr2ewr_sng_start;
wire ewr_sng2ewr_sny_start;
wire ewr_sny2ewg_snr_start;
//计数器设计
always @(posedge clk or negedge rst_n)begin
    if(!rst_n)begin
        cnt0 <= 0;
    end
    else if(add_cnt0)begin
        if(end_cnt0)
            cnt0 <= 0;
        else
            cnt0 <= cnt0 + 1;
    end
end

assign add_cnt0 =1 ;
assign end_cnt0 = add_cnt0 && cnt0==1*T1S-1 ;

always @(posedge clk or negedge rst_n)begin 
    if(!rst_n)begin
        cnt1 <= 0;
    end
    else if(add_cnt1)begin
        if(end_cnt1)
            cnt1 <= 0;
        else
            cnt1 <= cnt1 + 1;
    end
end

assign add_cnt1 = end_cnt0;
assign end_cnt1 = add_cnt1 && cnt1==30-1 ;
////四段式状态机

//第一段：同步时序always模块，格式化描述次态寄存器迁移到现态寄存器(不需更改）
always@(posedge clk or negedge rst_n)begin
    if(!rst_n)begin
        state_c <= IDLE;
    end
    else begin
        state_c <= state_n;
    end
end

//第二段：组合逻辑always模块，描述状态转移条件判断
always@(*)begin
    case(state_c)
        IDLE:begin//0初始状态
            if(idle2ewg_snr_start)begin
                state_n =EWG_SNR;//东西绿 南北红
            end
            else begin
                state_n = state_c;//保持现态
            end
        end
       EWG_SNR:begin//1
            if(ewg_snr2ewy_snr_start)begin
                state_n = EWY_SNR;//东西黄 南北红
            end
            else begin
                state_n = state_c;
            end
        end
        EWY_SNR:begin//2
            if(ewy_snr2ewr_sng_start)begin
                state_n = EWR_SNG;//东西红 南北绿
            end
            else begin
                state_n = state_c;
            end
        end
        EWR_SNG:begin//3
            if(ewr_sng2ewr_sny_start)begin
                state_n = EWR_SNY;//东西红 南北黄
            end
            else begin
                state_n = state_c;
            end
        end
        EWR_SNY:begin//4
            if(ewr_sny2ewg_snr_start)begin
                state_n = EWG_SNR;//东西绿 南北红
            end
            else begin
                state_n = state_c;
            end
        end
        default:begin
            state_n = IDLE;
        end
    endcase
end
//第三段：转移条件
assign idle2ewg_snr_start    = state_c==IDLE &&1 ;
assign ewg_snr2ewy_snr_start = state_c==EWG_SNR&&cnt1==12-1&&end_cnt0;
assign ewy_snr2ewr_sng_start = state_c==EWY_SNR&&cnt1==15-1&&end_cnt0;
assign ewr_sng2ewr_sny_start = state_c==EWR_SNG&&cnt1==27-1&&end_cnt0;
assign ewr_sny2ewg_snr_start = state_c==EWR_SNY&&cnt1==30-1&&end_cnt0;

//第四段：同步时序always模块，格式化描述寄存器输出（可有多个输出）
always  @(posedge clk or negedge rst_n)begin
    if(!rst_n)begin
        led <=6'b111_111;      //东西红绿黄灯 南北红绿黄灯
    end
    else begin
        case(state_c)
            IDLE:led<=6'b111_111;
            EWG_SNR:led<=6'b101_011;//东西绿 南北红 
            EWY_SNR:led<=6'b110_011;//东西黄 南北红
            EWR_SNG:led<=6'b011_101;//东西红 南北绿
            EWR_SNY:led<=6'b011_110;//东西红 南北黄
            default:led<=6'b111_111;//全灭
        endcase
    end
end
//东西 南北灯显示时间数据
always  @(*)begin
    case(state_c)
        EWG_SNR:begin
            ew_data=12-cnt1;
        end
        EWY_SNR:begin
            ew_data=15-cnt1;
        end
        EWR_SNG:begin
            ew_data=30-cnt1;
        end
        EWR_SNY:begin
            ew_data=30-cnt1;
        end
    endcase     
end


always  @(*)begin
    case(state_c)
        EWG_SNR:begin
            sn_data=15-cnt1;
        end
        EWY_SNR:begin
            sn_data=15-cnt1;
        end
        EWR_SNG:begin
            sn_data=27-cnt1;
        end
        EWR_SNY:begin
            sn_data=30-cnt1;
        end
    endcase     
end
endmodule
