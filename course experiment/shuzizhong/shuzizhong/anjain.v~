	module  key_clock(  
	    clk    ,  
	    rst_n  ,  
	    key    ,  
	    segment,  
	    seg_sel  
	);  
	  
	parameter   COUNT_TIME      =   23'd500_0000;  
	parameter   DELAY_TIME      =   10000       ;  
	parameter   SEG_WID         =   8           ;  
	parameter   SEG_SEL         =   6           ;  
	  
	parameter   KEY_S           =   4           ;  
	parameter   KEY_W           =   3           ;  
	  
	input                   clk         ;  
	input                   rst_n       ;  
	input   [ 2:0]          key         ;  
	output  [ 7:0]          segment     ;  
	output  [ 6:0]          seg_sel     ;  
	  
	wire    [ 2:0]          key_vld     ;  
	wire    [23:0]          segment_data;  
	wire    [ 3:0]          cnt2        ;  
	wire    [ 3:0]          cnt3        ;  
	wire    [ 3:0]          cnt4        ;  
	wire    [ 3:0]          cnt5        ;  
	wire    [ 3:0]          cnt6        ;  
	wire    [ 3:0]          cnt7        ;  
	  
	  
	             key_module  uut0(  
	                .clk     (clk    ),  
	                .rst_n   (rst_n  ),  
	                .key_in  (key    ),  
	                .key_vld (key_vld)  
	             );  
	  
	  
	             time_data  uut1(  
	                .clk      (clk    ),   
	                .rst_n    (rst_n  ),   
	                .key_vld  (key_vld),   
	                .cnt2     (cnt2   ),   
	                .cnt3     (cnt3   ),   
	                .cnt4     (cnt4   ),   
	                .cnt5     (cnt5   ),   
	                .cnt6     (cnt6   ),   
	                .cnt7     (cnt7   )   
	  
	             );  
	  
	  
	             seg_disp  uut2(  
	                 .clk          (clk                          ),   
	                 .rst_n        (rst_n                        ),   
	                 .segment      (segment                      ),   
	                 .seg_sel      (seg_sel                      ),  
	                 .segment_data (cnt7,cnt6,cnt5,cnt4,cnt3,cnt2)
						  
	  
	             );  
	  
	  
	endmodule  












	module time_data(  
	    clk      ,  
	    rst_n    ,  
	    key_vld  ,  
	    cnt2     ,  
	    cnt3     ,  
	    cnt4     ,  
	    cnt5     ,  
	    cnt6     ,  
	    cnt7  
	);  
	input                   clk         ;  
	input                   rst_n       ;  
	input   [ 3:0]          key_vld     ;  
	output  [ 3:0]          cnt2        ;  
	output  [ 3:0]          cnt3        ;  
	output  [ 3:0]          cnt4        ;  
	output  [ 3:0]          cnt5        ;  
	output  [ 3:0]          cnt6        ;  
	output  [ 3:0]          cnt7        ;  
	  
	reg                     key1_func   ;  
	reg                     key3_func   ;  
	reg     [ 2:0]          cnt0        ;  
	wire                    add_cnt0    ;  
	wire                    end_cnt0    ;  
	reg     [ 23:0]          cnt1       ;  
	wire                    add_cnt1    ;  
	wire                    end_cnt1    ;  
	reg     [ 3:0]          cnt2        ;  
	wire                    add_cnt2    ;  
	wire                    end_cnt2    ;  
	reg     [ 3:0]          cnt3        ;  
	wire                    add_cnt3    ;  
	wire                    end_cnt3    ;  
	reg     [ 3:0]          cnt4        ;  
	wire                    add_cnt4    ;  
	wire                    end_cnt4    ;  
	reg     [ 3:0]          cnt5        ;  
	wire                    add_cnt5    ;  
	wire                    end_cnt5    ;  
	reg     [ 3:0]          cnt6        ;  
	reg     [ 3:0]          x           ;  
	wire                    add_cnt6    ;  
	wire                    end_cnt6    ;  
	reg     [ 3:0]          cnt7        ;  
	reg     [ 1:0]          y           ;  
	wire                    add_cnt7    ;  
	wire                    end_cnt7    ;  
	  
	  
	  
	always  @(posedge clk or negedge rst_n)begin  
	    if(rst_n==1'b0)begin  
	        key1_func<=1'b0;  
	    end  
	    else if(key_vld[0]==1'b1)begin  
	        key1_func<=~key1_func;  
	    end  
	    else begin  
	        key1_func<=key1_func;  
	    end  
	end  
	  
	  
	  
	always @(posedge clk or negedge rst_n) begin   
	    if (rst_n==0) begin  
	        cnt0 <= 0;   
	    end  
	    else if(add_cnt0) begin  
	        if(end_cnt0)  
	            cnt0 <= 0;   
	        else  
	            cnt0 <= cnt0+1 ;  
	   end  
	end  
	assign add_cnt0 = key_vld[1];  
	assign end_cnt0 = add_cnt0  && cnt0 == 6-1 ;  
	  
	  
	always  @(posedge clk or negedge rst_n)begin  
	    if(rst_n==1'b0)begin  
	        key3_func<=1'b0;  
	    end  
	    else if(key1_func==1'b1 && key_vld[2]==1'b1)begin       
	        key3_func<=1'b1;  
	    end  
	    else begin  
	        key3_func<=1'b0;  
	    end  
	end  
	  
	  
	always @(posedge clk or negedge rst_n) begin   
	    if (rst_n==0) begin  
	        cnt1 <= 0;   
	    end  
	    else if(add_cnt1) begin  
	        if(end_cnt1)  
	            cnt1 <= 0;   
	        else  
	            cnt1 <= cnt1+1 ;  
	   end  
	   else begin  
	       cnt1 <= 0;  
	   end  
	end  
	assign add_cnt1 = key1_func==0;  
	assign end_cnt1 = add_cnt1  && cnt1 == 500_0000-1 ;  
	  
	  
	  
	  
	always @(posedge clk or negedge rst_n) begin   
	    if (rst_n==0) begin  
	        cnt2 <= 0;   
	    end  
	    else if(add_cnt2) begin  
	        if(end_cnt2)  
	            cnt2 <= 0;   
	        else  
	            cnt2 <= cnt2+1 ;  
	   end  
	end  
	assign add_cnt2 = (key1_func && cnt0==0 && key3_func) || (key1_func==0 && end_cnt1);  
	assign end_cnt2 = add_cnt2  && cnt2 == 10-1 ;  
	  
	  
	  
	  
	always @(posedge clk or negedge rst_n) begin   
	    if (rst_n==0) begin  
	        cnt3 <= 0;   
	    end  
	    else if(add_cnt3) begin  
	        if(end_cnt3)  
	            cnt3 <= 0;   
	        else  
	            cnt3 <= cnt3+1 ;  
	   end  
	end  
	assign add_cnt3 = (key1_func && cnt0==1 && key3_func) || (key1_func==0 && end_cnt2);  
	assign end_cnt3 = add_cnt3  && cnt3 == 6-1 ;  
	  
	  
	  
	always @(posedge clk or negedge rst_n) begin   
	    if (rst_n==0) begin  
	        cnt4 <= 0;   
	    end  
	    else if(add_cnt4) begin  
	        if(end_cnt4)  
	            cnt4 <= 0;   
	        else  
	            cnt4 <= cnt4+1 ;  
	   end  
	end  
	assign add_cnt4 = (key1_func && cnt0==2 && key3_func) || (key1_func==0 && end_cnt3);  
	assign end_cnt4 = add_cnt4  && cnt4 == 10-1 ;  
	  
	  
	always @(posedge clk or negedge rst_n) begin   
	    if (rst_n==0) begin  
	        cnt5 <= 0;   
	    end  
	    else if(add_cnt5) begin  
	        if(end_cnt5)  
	            cnt5 <= 0;   
	        else  
	            cnt5 <= cnt5+1 ;  
	   end  
	end  
	assign add_cnt5 = (key1_func && cnt0==3 && key3_func) || (key1_func==0 && end_cnt4);  
	assign end_cnt5 = add_cnt5  && cnt5 == 6-1 ;  
	  
	  
	always @(posedge clk or negedge rst_n) begin   
	    if (rst_n==0) begin  
	        cnt6 <= 0;   
	    end  
	    else if(add_cnt6) begin  
	        if(end_cnt6)  
	            cnt6 <= 0;   
	        else  
	            cnt6 <= cnt6+1 ;  
	   end  
	end  
	assign add_cnt6 = (key1_func && cnt0==4 && key3_func) || (key1_func==0 && end_cnt5);  
	assign end_cnt6 = add_cnt6  && cnt6 == x-1 ;  
	  
	  
	  
	always @(posedge clk or negedge rst_n) begin   
	    if (rst_n==0) begin  
	        cnt7 <= 0;   
	    end  
	    else if(add_cnt7) begin  
	        if(end_cnt7)  
	            cnt7 <= 0;   
	        else  
	            cnt7 <= cnt7+1 ;  
	   end  
	end  
	assign add_cnt7 = (key1_func && cnt0==5 && key3_func) || (key1_func==0 && end_cnt6);  
	assign end_cnt7 = add_cnt7  && cnt7 == y-1 ;  
	  
	  
	always  @(*)begin  
	    if(cnt7==2)begin  
	        x = 4;  
	    end  
	    else begin  
	        x =10;  
	    end  
	end  
	  
	always  @(*)begin  
	    if(cnt6>=4)begin  
	        y = 2;  
	    end  
	    else begin  
	        y = 3;  
	    end  
	end  
	  
	  
	endmodule  




	module seg_disp(  
	    clk         ,  
	    rst_n       ,  
	    segment     ,  
	    segment_data,  
	    seg_sel  
	);  
	parameter   ZERO            =   8'b1100_0000;  
	parameter   ONE             =   8'b1111_1001;  
	parameter   TWO             =   8'b1010_0100;  
	parameter   THREE           =   8'b1011_0000;  
	parameter   FOUR            =   8'b1001_1001;  
	parameter   FIVE            =   8'b1001_0010;  
	parameter   SIX             =   8'b1000_0010;  
	parameter   SEVEN           =   8'b1111_1000;  
	parameter   EIGHT           =   8'b1000_0000;  
	parameter   NINE            =   8'b1001_0000;  
	  
	  
	  
	input                   clk         ;  
	input                   rst_n       ;  
	input   [23:0]          segment_data;  
	output  [ 7:0]          segment     ;  
	output  [ 5:0]          seg_sel     ;  
	  
	  
	reg     [ 7:0]          segment     ;  
	wire    [ 7:0]          segment_tmp ;  
	reg     [ 5:0]          seg_sel     ;  
	  
	  
	reg     [15:0]          cnt8        ;  
	wire                    add_cnt8    ;  
	wire                    end_cnt8    ;  
	reg     [ 2:0]          cnt9        ;  
	wire                    add_cnt9    ;  
	wire                    end_cnt9    ;  
	  
	  
	  
	  
	always @(posedge clk or negedge rst_n) begin   
	    if (rst_n==0) begin  
	        cnt8 <= 0;   
	    end  
	    else if(add_cnt8) begin  
	        if(end_cnt8)  
	            cnt8 <= 0;   
	        else  
	            cnt8 <= cnt8+1 ;  
	   end  
	end  
	assign add_cnt8 = 1;  
	assign end_cnt8 = add_cnt8  && cnt8 == 10000-1 ;  
	  
	  
	  
	  
	always @(posedge clk or negedge rst_n) begin   
	    if (rst_n==0) begin  
	        cnt9 <= 0;   
	    end  
	    else if(add_cnt9) begin  
	        if(end_cnt9)  
	            cnt9 <= 0;   
	        else  
	            cnt9 <= cnt9+1 ;  
	   end  
	end  
	assign add_cnt9 = end_cnt8;  
	assign end_cnt9 = add_cnt9  && cnt9 == 6-1 ;  
	  
	  
	  
	  
	assign segment_tmp = segment_data[(1+cnt9)*4-1 -:4];  
	  
	always@(posedge clk or negedge rst_n)begin  
	    if(rst_n==1'b0)begin  
	         segment<=ZERO;  
	    end  
	    else  begin  
	        case(segment_tmp)  
	            4'd0:segment <= ZERO;  
	            4'd1:segment <= ONE;  
	            4'd2:segment <= TWO;  
	            4'd3:segment <= THREE;  
	            4'd4:segment <= FOUR;  
	            4'd5:segment <= FIVE ;  
	            4'd6:segment <= SIX ;  
	            4'd7:segment <= SEVEN ;  
	            4'd8:segment <= EIGHT ;  
	            4'd9:segment <= NINE ;  
	            default:begin  
	                segment<=segment;  
	            end  
	        endcase  
	    end  
	end  
	  
	  
	  
	  
	always@(posedge clk or negedge rst_n)begin  
	    if(rst_n==1'b0)begin  
	        seg_sel <= 6'b11_1110;  
	    end  
	    else begin  
	        seg_sel <= ~(6'b1<<cnt9);  
	    end  
	end  
	  
	endmodule  

